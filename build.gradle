/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
subprojects {

    afterEvaluate {
        sourceCompatibility = 9
        targetCompatibility = 9

        repositories {
            jcenter()
        }

        dependencies {
            testImplementation(
                    'org.junit.jupiter:junit-jupiter-api:5.1.0',
                    'com.netflix.feign:feign-core:8.18.0',
                    'com.netflix.feign:feign-okhttp:8.18.0',
                    'com.netflix.feign:feign-gson:8.18.0'
            )
            testRuntimeOnly(
                    'org.junit.jupiter:junit-jupiter-engine:5.1.0',
                    'com.netflix.feign:feign-core:8.18.0',
                    'com.netflix.feign:feign-okhttp:8.18.0',
                    'com.netflix.feign:feign-gson:8.18.0'
            )

        }

        sourceSets {
            main {
                java {
                    srcDirs = ["src/main/java"]
                }
                resources {
                    srcDirs = ["src/main/resources"]
                }
            }
        }

        compileJava {
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        javadoc {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.addStringOption('-module-path', classpath.asPath)
            }
        }




        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'org.junit.jupiter.api',
                        '--add-modules', 'feign.core',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--add-reads', "$moduleName=org.junit.platform.commons",
                        '--add-reads', "$moduleName=feign.core",
                        '--add-reads', "$moduleName=feign.gson",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }




        test {
            useJUnitPlatform()
            environment "MARVEL", "JIGSAW"
            environment "HTTP", "JIGSAW"
            beforeTest { descriptor ->
                logger.lifecycle("Running test: " + descriptor)

            }

            inputs.property("moduleName", moduleName)
            doFirst {
                // can't access to file in resources directory => copy to java classes directory
                copy {
                    from "$projectDir/src/main/resources"
                    into "$buildDir/classes/java/main/"
                }

                jvmArgs = [
                        //'--show-module-resolution',
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--add-reads', "$moduleName=org.junit.platform.commons",
                        '--add-reads', "$moduleName=feign.core",
                        '--add-reads', "$moduleName=feign.gson",
                        '--add-exports', "$moduleName/$moduleName=org.junit.jupiter.api",
                        '--add-exports', "$moduleName/$moduleName=org.junit.platform.commons",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()

            }

            onOutput { descriptor, event ->
                logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
            }
        }

    }
}
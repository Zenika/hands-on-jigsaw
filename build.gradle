/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
subprojects {

    afterEvaluate {
        sourceCompatibility = 9
        targetCompatibility = 9

        repositories {
            jcenter()
        }

        dependencies {
            testImplementation(
                    'org.junit.jupiter:junit-jupiter-api:5.1.0',
                    'com.netflix.feign:feign-core:8.18.0',
                    'com.netflix.feign:feign-okhttp:8.18.0',
                    'com.netflix.feign:feign-gson:8.18.0'
            )
            testRuntimeOnly(
                    'org.junit.jupiter:junit-jupiter-engine:5.1.0',
                    'com.netflix.feign:feign-core:8.18.0',
                    'com.netflix.feign:feign-okhttp:8.18.0',
                    'com.netflix.feign:feign-gson:8.18.0'
            )

        }

        sourceSets {
            main {
                java {
                    srcDirs = ["src/main/java"]
                }
                resources {
                    srcDirs = ["src/main/resources"]
                }
            }
        }

        test {
            useJUnitPlatform()
            environment "MARVEL", "CLASSPATH"
            environment "HTTP", "CLASSPATH"


            // listen to events in the test execution lifecycle
            beforeTest { descriptor ->
                logger.lifecycle("Running test: " + descriptor)
            }

            // listen to standard out and standard error of the test JVM(s)
            onOutput { descriptor, event ->
                logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
            }

        }


    }
}
